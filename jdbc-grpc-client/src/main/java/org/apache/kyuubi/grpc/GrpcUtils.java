package org.apache.kyuubi.grpc;

import org.apache.kyuubi.grpc.jdbc.statement.AutoGeneratedKeys;
import org.apache.kyuubi.grpc.jdbc.statement.ResultSetConcurrency;
import org.apache.kyuubi.grpc.jdbc.statement.ResultSetHoldability;
import org.apache.kyuubi.grpc.jdbc.statement.ResultSetType;

public class GrpcUtils {
  final static Status OK = Status.newBuilder().setStatusCode(StatusCode.OK).setSqlState("00000").build();

  public static int toJDBC(ResultSetType type) {
    switch (type) {
      case TYPE_FORWARD_ONLY:
        return java.sql.ResultSet.TYPE_FORWARD_ONLY;
      case TYPE_SCROLL_INSENSITIVE:
        return java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE;
      case TYPE_SCROLL_SENSITIVE:
        return java.sql.ResultSet.TYPE_SCROLL_SENSITIVE;
      default:
        throw new IllegalArgumentException("Unknown ResultSetType: " + type);
    }
  }

  public static int toJDBC(ResultSetConcurrency concurrency) {
    switch (concurrency) {
      case CONCUR_READ_ONLY:
        return java.sql.ResultSet.CONCUR_READ_ONLY;
      case CONCUR_UPDATABLE:
        return java.sql.ResultSet.CONCUR_UPDATABLE;
      default:
        throw new IllegalArgumentException("Unknown ResultSetConcurrency: " + concurrency);
    }
  }

  public static int toJDBC(ResultSetHoldability holdability) {
    switch (holdability) {
      case CLOSE_CURSORS_AT_COMMIT:
        return java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT;
      case HOLD_CURSORS_OVER_COMMIT:
        return java.sql.ResultSet.HOLD_CURSORS_OVER_COMMIT;
      default:
        throw new IllegalArgumentException("Unknown ResultSetHoldability: " + holdability);
    }
  }

  /**
   * Convert a {@link AutoGeneratedKeys} to a {@link java.sql.Statement} constant.
   *
   * @param autoGeneratedKeys the {@link AutoGeneratedKeys} to convert
   * @return the converted {@link java.sql.Statement} constant
   */
  public static int toJDBC(AutoGeneratedKeys autoGeneratedKeys) {
    switch (autoGeneratedKeys) {
      case RETURN_GENERATED_KEYS:
        return java.sql.Statement.RETURN_GENERATED_KEYS;
      case NO_GENERATED_KEYS:
        return java.sql.Statement.NO_GENERATED_KEYS;
      default:
        throw new IllegalArgumentException("Unknown AutoGeneratedKeys: " + autoGeneratedKeys);
    }
  }

  /**
   * Convert a {@link java.sql.SQLWarning} to a {@link SQLWarning}.
   *
   * @param warning the {@link java.sql.SQLWarning} to convert
   * @return the converted {@link SQLWarning}
   */
  public static SQLWarning toProto(java.sql.SQLWarning warning) {
    if (warning == null) {
      return null;
    }
    SQLWarning.Builder builder = SQLWarning.newBuilder();
    if (warning.getMessage() != null) {
      builder.setReason(warning.getMessage());
    }
    if (warning.getSQLState() != null) {
      builder.setSqlState(warning.getSQLState());
    }
    if (warning.getErrorCode() != 0) {
      builder.setVendorCode(warning.getErrorCode());
    }
    if (warning.getNextWarning() != null) {
      builder.setNextWarning(toProto(warning.getNextWarning()));
    }
    return builder.build();
  }

}
