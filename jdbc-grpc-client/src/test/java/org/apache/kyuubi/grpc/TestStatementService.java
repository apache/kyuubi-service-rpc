/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.kyuubi.grpc;

import com.google.protobuf.ProtocolStringList;
import io.grpc.stub.StreamObserver;
import org.apache.kyuubi.grpc.common.ConnectionHandle;
import org.apache.kyuubi.grpc.common.StatementHandle;
import org.apache.kyuubi.grpc.jdbc.DirectStatusResp;
import org.apache.kyuubi.grpc.jdbc.statement.*;

import java.sql.Connection;
import java.sql.Statement;
import java.util.*;

import static org.apache.kyuubi.grpc.GrpcUtils.OK;

public class TestStatementService extends StatementGrpc.StatementImplBase {

  private final TestConnectionService connectionService;

  private final Map<StatementHandle, Statement> statements = new HashMap<>();

  private Statement getStatement(StatementHandle statementId) {
    Statement statement = statements.get(statementId);
    if (statement == null) {
      throw new IllegalArgumentException("Statement Id " + statementId.getId() + " not found");
    }
    return statement;
  }

  public TestStatementService(TestConnectionService connectionService) {
    this.connectionService = connectionService;
  }

  @Override
  public void createStatement(CreateStatementReq request, StreamObserver<DirectStatusResp> responseObserver) {
    DirectStatusResp.Builder builder = DirectStatusResp.newBuilder();
    try {
      ConnectionHandle connectionId = request.getConnectionId();
      int resultSetType = GrpcUtils.toJDBC(request.getResultSetType());
      int resultSetConcurrency = GrpcUtils.toJDBC(request.getResultSetConcurrency());
      int resultSetHoldability = GrpcUtils.toJDBC(request.getResultSetHoldability());
      StatementHandle statementId = request.getStatementId();
      if (statementId == StatementHandle.getDefaultInstance()) {
        statementId = StatementHandle.newBuilder()
          .setId(UUID.randomUUID().toString())
          .build();
      }

      if (!statements.containsKey(statementId)) {
        Connection connection = connectionService.getConnection(connectionId);
        Statement statement = connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        statements.put(statementId, statement);
      }

      DirectStatusResp resp = builder
        .setIdentifier(statementId.getId())
        .setStatus(OK)
        .build();
      responseObserver.onNext(resp);
    } catch (Exception e) {
      connectionService.error(e);
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void closeStatement(StatementHandle request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      Statement stmt = statements.remove(request);
      if (stmt == null) {
        throw new IllegalArgumentException("Statement Id " + request.getId() + " not found");
      }
      stmt.close();
      responseObserver.onNext(connectionService.ok(request.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void executeQuery(ExecuteQueryReq request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      StatementHandle statementId = request.getStatementId();
      Statement statement = getStatement(statementId);
      ExecuteQueryReq.AutoGeneratedKeysCase keysCase = request.getAutoGeneratedKeysCase();
      switch (keysCase) {
        case AUTOGENERATEDKEY:
          int autoGeneratedKeys = GrpcUtils.toJDBC(request.getAutoGeneratedKey());
          statement.execute(request.getSql(), autoGeneratedKeys);
          break;
        case COLUMNINDEXES:
          List<Integer> indexesList = request.getColumnIndexes().getColumnIndexesList();
          int[] columnIndexes = indexesList.stream().mapToInt(Integer::intValue).toArray();
          statement.execute(request.getSql(), columnIndexes);
          break;
        case COLUMNNAMES:
          ProtocolStringList namesList = request.getColumnNames().getColumnNamesList();
          String[] columnNames = namesList.toArray(new String[namesList.size()]);
          statement.execute(request.getSql(), columnNames);
          break;
        case AUTOGENERATEDKEYS_NOT_SET:
          statement.executeQuery(request.getSql());
          break;
      }
      responseObserver.onNext(connectionService.ok(statementId.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void executeUpdate(ExecuteQueryReq request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      StatementHandle statementId = request.getStatementId();
      Statement statement = getStatement(statementId);
      ExecuteQueryReq.AutoGeneratedKeysCase keysCase = request.getAutoGeneratedKeysCase();
      switch (keysCase) {
        case AUTOGENERATEDKEY:
          statement.execute(request.getSql(), request.getAutoGeneratedKey().getNumber());
          break;
        case COLUMNINDEXES:
          List<Integer> indexesList = request.getColumnIndexes().getColumnIndexesList();
          int[] columnIndexes = indexesList.stream().mapToInt(Integer::intValue).toArray();
          statement.execute(request.getSql(), columnIndexes);
          break;
        case COLUMNNAMES:
          ProtocolStringList namesList = request.getColumnNames().getColumnNamesList();
          String[] columnNames = namesList.toArray(new String[namesList.size()]);
          statement.execute(request.getSql(), columnNames);
          break;
        case AUTOGENERATEDKEYS_NOT_SET:
          statement.executeQuery(request.getSql());
          break;
      }
      responseObserver.onNext(connectionService.ok(statementId.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void getMaxFieldSize(StatementHandle request, StreamObserver<GetMaxFieldSizeResp> responseObserver) {
    GetMaxFieldSizeResp.Builder builder = GetMaxFieldSizeResp.newBuilder();
    try {
      Statement statement = getStatement(request);
      int maxFieldSize = statement.getMaxFieldSize();
      GetMaxFieldSizeResp resp = builder
        .setStatus(OK)
        .setMax(maxFieldSize)
        .build();
      responseObserver.onNext(resp);
    } catch (Exception e) {
      GetMaxFieldSizeResp resp = builder
        .setStatus(connectionService.errorStatus(e))
        .build();
      responseObserver.onNext(resp);
    }
    responseObserver.onCompleted();
  }

  @Override
  public void setMaxFieldSize(SetMaxFieldSizeReq request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      StatementHandle statementId = request.getStatementId();
      Statement statement = getStatement(statementId);
      statement.setMaxFieldSize(request.getMax());
      responseObserver.onNext(connectionService.ok(statementId.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void getMaxRows(StatementHandle request, StreamObserver<GetMaxRowsResp> responseObserver) {
    GetMaxRowsResp.Builder builder = GetMaxRowsResp.newBuilder();
    try {
      Statement statement = getStatement(request);
      int maxRows = statement.getMaxRows();
      GetMaxRowsResp resp = builder
        .setStatus(OK)
        .setMax(maxRows)
        .build();
      responseObserver.onNext(resp);
    } catch (Exception e) {
      GetMaxRowsResp resp = builder
        .setStatus(connectionService.errorStatus(e))
        .build();
      responseObserver.onNext(resp);
    }
    responseObserver.onCompleted();
  }

  @Override
  public void setMaxRows(SetMaxRowsReq request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      StatementHandle statementId = request.getStatementId();
      Statement statement = getStatement(statementId);
      statement.setMaxRows(request.getMax());
      responseObserver.onNext(connectionService.ok(statementId.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void setQueryTimeout(SetQueryTimeoutReq request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      StatementHandle statementId = request.getStatementId();
      Statement statement = getStatement(statementId);
      statement.setQueryTimeout(request.getTimeout());
      responseObserver.onNext(connectionService.ok(statementId.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void getQueryTimeout(StatementHandle request, StreamObserver<GetQueryTimeoutResp> responseObserver) {
    GetQueryTimeoutResp.Builder builder = GetQueryTimeoutResp.newBuilder();
    try {
      Statement statement = getStatement(request);
      int timeout = statement.getQueryTimeout();
      GetQueryTimeoutResp resp = builder
        .setStatus(OK)
        .setTimeout(timeout)
        .build();
      responseObserver.onNext(resp);
    } catch (Exception e) {
      GetQueryTimeoutResp resp = builder
        .setStatus(connectionService.errorStatus(e))
        .build();
      responseObserver.onNext(resp);
    }
    responseObserver.onCompleted();
  }

  @Override
  public void getWarnings(StatementHandle request, StreamObserver<GetWarningsResp> responseObserver) {
    GetWarningsResp.Builder builder = GetWarningsResp.newBuilder();
    try {
      Statement statement = getStatement(request);
      java.sql.SQLWarning warnings = statement.getWarnings();
      GetWarningsResp resp = builder
        .setStatus(OK)
        .setWarnings(GrpcUtils.toProto(warnings))
        .build();
      responseObserver.onNext(resp);
    } catch (Exception e) {
      GetWarningsResp resp = builder
        .setStatus(connectionService.errorStatus(e))
        .build();
      responseObserver.onNext(resp);
    }
    responseObserver.onCompleted();
  }

  @Override
  public void setEscapeProcessing(SetEscapeProcessingReq request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      StatementHandle statementId = request.getStatementId();
      Statement statement = getStatement(statementId);
      statement.setEscapeProcessing(request.getEnable());
      responseObserver.onNext(connectionService.ok(statementId.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }

  @Override
  public void cancelStatement(StatementHandle request, StreamObserver<DirectStatusResp> responseObserver) {
    try {
      Statement statement = getStatement(request);
      statement.cancel();
      responseObserver.onNext(connectionService.ok(request.getId()));
    } catch (Exception e) {
      responseObserver.onNext(connectionService.error(e));
    }
    responseObserver.onCompleted();
  }
}
