// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "org/apache/kyuubi/grpc/jdbc/common.proto";
import "org/apache/kyuubi/grpc/common/errors.proto";
import "org/apache/kyuubi/grpc/jdbc/response.proto";

option java_multiple_files = true;
option java_package = "org.apache.kyuubi.grpc.jdbc.statement";

/**
 * The service definition of JDBC statement service, mapping to
 * java.sql.Statement
 * TODO: add more methods
 *   - executeLargeBatch
 *   - executeLargeUpdate
 */
service Statement {
  rpc CreateStatement(CreateStatementReq) returns (DirectStatusResp);
  rpc CloseStatement(StatementHandle) returns (DirectStatusResp);
  rpc ExecuteQuery(ExecuteQueryReq) returns (DirectStatusResp);
  rpc ExecuteUpdate(ExecuteQueryReq) returns (DirectStatusResp);
  rpc ExecuteLargeUpdate(ExecuteQueryReq) returns (DirectStatusResp);
  rpc GetMaxFieldSize(StatementHandle) returns (GetMaxFieldSizeResp);
  rpc SetMaxFieldSize(SetMaxFieldSizeReq) returns (DirectStatusResp);
  rpc GetMaxRows(StatementHandle) returns (GetMaxRowsResp);
  rpc SetMaxRows(SetMaxRowsReq) returns (DirectStatusResp);
  rpc SetEscapeProcessing(SetEscapeProcessingReq) returns (DirectStatusResp);
  rpc GetQueryTimeout(StatementHandle) returns (GetQueryTimeoutResp);
  rpc SetQueryTimeout(SetQueryTimeoutReq) returns (DirectStatusResp);
  rpc CancelStatement(StatementHandle) returns (DirectStatusResp);
  rpc GetWarnings(StatementHandle) returns (GetWarningsResp);
  rpc ClearWarnings(StatementHandle) returns (DirectStatusResp);
  rpc SetCursorName(SetCursorNameReq) returns (DirectStatusResp);
  rpc GetMoreResults(GetMoreResultsReq) returns (GetMoreResultsResp);
  rpc GetFetchDirection(StatementHandle) returns (GetFetchDirectionResp);
  rpc SetFetchDirection(SetFetchDirectionReq) returns (DirectStatusResp);
  rpc GetFetchSize(StatementHandle) returns (GetFetchSizeResp);
  rpc SetFetchSize(SetFetchSizeReq) returns (DirectStatusResp);
  rpc AddBatch(AddBatchReq) returns (DirectStatusResp);
  rpc ClearBatch(StatementHandle) returns (DirectStatusResp);
  rpc ExecuteBatch(StatementHandle) returns (ExecuteBatchResp);
  rpc GetResultSet(StatementHandle) returns (DirectStatusResp);
  rpc GetGeneratedKeys(StatementHandle) returns (DirectStatusResp);
  rpc IsClosed(StatementHandle) returns (IsClosedResp);
  rpc SetPoolable(SetPoolableReq) returns (DirectStatusResp);
  rpc IsPoolable(StatementHandle) returns (IsPoolableResp);
  rpc CloseOnCompletion(StatementHandle) returns (DirectStatusResp);
  rpc IsCloseOnCompletion(StatementHandle) returns (IsCloseOnCompletionResp);
}

enum ResultSetType {
  TYPE_FORWARD_ONLY = 0; // 1003
  TYPE_SCROLL_INSENSITIVE = 1; // 1004
  TYPE_SCROLL_SENSITIVE = 2; // 1005
}

enum ResultSetConcurrency {
  CONCUR_READ_ONLY = 0; // 1007
  CONCUR_UPDATABLE = 1; // 1008
}

enum ResultSetHoldability {
  HOLD_CURSORS_OVER_COMMIT = 0; // 1
  CLOSE_CURSORS_AT_COMMIT = 1; // 2
}

enum AutoGeneratedKeys {
  NO_GENERATED_KEYS = 0; // 1
  RETURN_GENERATED_KEYS = 1; // 2
}

enum FetchDirection {
  // The constant indicating that the rows in a result set will be
  // processed in a forward direction; first-to-last.
  FETCH_FORWARD = 0; // 1000
  // The constant indicating that the rows in a result set will be
  // processed in a reverse direction; last-to-first.
  FETCH_REVERSE = 1; // 1001
  FETCH_UNKNOWN = 2; // 1002
}

enum ResultSetCloseOperation {
  CLOSE_CURRENT_RESULT = 0; // 1
  KEEP_CURRENT_RESULT = 1; // 2
  CLOSE_ALL_RESULTS = 2; // 3
}

message CreateStatementReq {
  ConnectionHandle connection_id = 1;
  // The statement id is optional in the request. If it's present, the server
  // will try to reuse the existing statement with the same id.
  StatementHandle statement_id = 2;
  ResultSetType resultSetType = 3;
  ResultSetConcurrency resultSetConcurrency = 4;
  ResultSetHoldability resultSetHoldability = 5;
}

message ExecuteQueryReq {
  StatementHandle statement_id = 1;
  string sql = 2;

  message ColumnIndexes {
    repeated uint32 columnIndexes = 1;
  }

  message ColumnNames {
    repeated string columnNames = 1;
  }

  oneof autoGeneratedKeys {
    AutoGeneratedKeys autoGeneratedKey = 3;
    ColumnNames columnNames = 4;
    ColumnIndexes columnIndexes = 5;
  }
}

message GetMaxFieldSizeResp {
  Status status = 1;
  uint32 max = 2;
}

message SetMaxFieldSizeReq {
  StatementHandle statement_id = 1;
  uint32 max = 2;
}

message GetMaxRowsResp {
  Status status = 1;
  uint32 max = 2;
}

message SetMaxRowsReq {
  StatementHandle statement_id = 1;
  uint32 max = 2;
}

message SetEscapeProcessingReq {
  StatementHandle statement_id = 1;
  bool enable = 2;
}

message GetQueryTimeoutResp {
  Status status = 1;
  uint32 timeout = 2;
}

message SetQueryTimeoutReq {
  StatementHandle statement_id = 1;
  uint32 timeout = 2;
}

message SetCursorNameReq {
  StatementHandle statement_id = 1;
  string name = 2;
}

message GetMoreResultsReq {
  StatementHandle statement_id = 1;
  ResultSetCloseOperation close_operation = 2;
}

message GetMoreResultsResp {
  Status status = 1;
  bool has_more_results = 2;
}

message SetFetchDirectionReq {
  StatementHandle statement_id = 1;
  FetchDirection direction = 2;
}

message GetFetchDirectionResp {
  Status status = 1;
  FetchDirection direction = 2;
}

message GetFetchSizeResp {
  Status status = 1;
  uint32 fetch_size = 2;
}

message SetFetchSizeReq {
  StatementHandle statement_id = 1;
  uint32 fetch_size = 2;
}

message GetResultSetConcurrencyResp {
  Status status = 1;
  ResultSetConcurrency concurrency = 2;
}

message GetResultSetHoldabilityResp {
  Status status = 1;
  ResultSetHoldability holdability = 2;
}

message GetResultSetTypeResp {
  Status status = 1;
  ResultSetType type = 2;
}

message AddBatchReq {
  StatementHandle statement_id = 1;
  string sql = 2;
}

message ClearBatchReq {
  StatementHandle statement_id = 1;
}

message ExecuteBatchResp {
  Status status = 1;
  repeated uint64 update_counts = 2;
}

message IsClosedResp {
  Status status = 1;
  bool is_closed = 2;
}

message SetPoolableReq {
  StatementHandle statement_id = 1;
  bool poolable = 2;
}

message IsPoolableResp {
  Status status = 1;
  bool is_poolable = 2;
}

message IsCloseOnCompletionResp {
  Status status = 1;
  bool close_on_completion = 2;
}
