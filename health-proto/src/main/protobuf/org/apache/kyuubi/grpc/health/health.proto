// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// E.g. https://github.com/grpc/grpc/blob/master/doc/health-checking.md
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.kyuubi.grpc.health";

/* Request the services list that support reporting health status
 * at the server-side
 */
message GetServicesReq {
}

message GetServicesResp {
  repeated string services = 1;
}

message HealthCheckReq {
  repeated string services = 1;
}

enum HealthStatus {
  UNKNOWN = 0; // unable to do health check
  HEALTHY = 1;
  UNHEALTHY = 2;
  NOT_FOUND = 3;
}

message HealthCheckResponse {
  map<string, HealthStatus> statuses = 1;
}

service Health {
  /* Request the services list that support reporting health status
   * at the server-side
   */
  rpc GetServices(GetServicesReq) returns(GetServicesResp);

  /* Query the health statuses of all registered services from the server-side.
   * and a deadline should be set on the rpc.
   * The client can optionally chose the service names(ids) it wants to query
   * for health statuses.
   */
  rpc Check(HealthCheckReq) returns (HealthCheckResponse);

  /* Perform a streaming health-check. The server will immediately send back a message
   * indicating the current health status. It will then subsequently send a new message
   * whenever the service's serving status changes.
   */
  rpc Watch(HealthCheckReq) returns (stream HealthCheckResponse);
}
